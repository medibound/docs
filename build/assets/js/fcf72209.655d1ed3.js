"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[814],{7361:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"hardware-support/tabs/esp32","title":"ESP32 Integration Guide","description":"The ESP32 is a powerful, low-cost microcontroller that\'s ideal for medical device integration with Medibound. This guide will walk you through setting up and implementing the Medibound ESP32 library.","source":"@site/docs/hardware-support/tabs/esp32.md","sourceDirName":"hardware-support/tabs","slug":"/hardware-support/tabs/esp32","permalink":"/docs/hardware-support/tabs/esp32","draft":false,"unlisted":false,"editUrl":"https://github.com/medibound/docs/tree/main/docs/hardware-support/tabs/esp32.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Supported Hardware","permalink":"/docs/hardware-support/"},"next":{"title":"Raspberry Pi Integration Guide","permalink":"/docs/hardware-support/tabs/raspberry-pi"}}');var r=i(4848),t=i(8453);const l={sidebar_position:1},d="ESP32 Integration Guide",a={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Implementation",id:"basic-implementation",level:2},{value:"Key Features",id:"key-features",level:2},{value:"1. Real-time Data Transmission",id:"1-real-time-data-transmission",level:3},{value:"2. Device Management",id:"2-device-management",level:3},{value:"3. Security",id:"3-security",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Data Types",id:"custom-data-types",level:3},{value:"Event Handling",id:"event-handling",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Support",id:"support",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"esp32-integration-guide",children:"ESP32 Integration Guide"})}),"\n",(0,r.jsx)(n.p,{children:"The ESP32 is a powerful, low-cost microcontroller that's ideal for medical device integration with Medibound. This guide will walk you through setting up and implementing the Medibound ESP32 library."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ESP32 development board"}),"\n",(0,r.jsx)(n.li,{children:"Arduino IDE or PlatformIO"}),"\n",(0,r.jsx)(n.li,{children:"Medibound account and API credentials"}),"\n",(0,r.jsx)(n.li,{children:"Basic understanding of C++ and embedded systems"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Add the Medibound ESP32 library to your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <MediboundESP32.h>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Configure your development environment:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Install the ESP32 board support package"}),"\n",(0,r.jsx)(n.li,{children:"Set up your WiFi credentials"}),"\n",(0,r.jsx)(n.li,{children:"Configure your Medibound API credentials"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,r.jsx)(n.p,{children:"Here's a basic example of implementing the Medibound ESP32 library:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <MediboundESP32.h>\n#include <WiFi.h>\n\n// Initialize the Medibound client\nMediboundESP32 medibound;\n\n// WiFi credentials\nconst char* ssid = "YOUR_WIFI_SSID";\nconst char* password = "YOUR_WIFI_PASSWORD";\n\n// Medibound credentials\nconst char* apiKey = "YOUR_API_KEY";\nconst char* deviceId = "YOUR_DEVICE_ID";\n\nvoid setup() {\n  Serial.begin(115200);\n  \n  // Connect to WiFi\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n  \n  // Initialize Medibound\n  medibound.begin(apiKey, deviceId);\n}\n\nvoid loop() {\n  // Send sensor data\n  float temperature = readTemperature();\n  medibound.sendData("temperature", temperature);\n  \n  // Check for commands\n  if (medibound.hasCommand()) {\n    String command = medibound.getCommand();\n    processCommand(command);\n  }\n  \n  delay(1000);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsx)(n.h3,{id:"1-real-time-data-transmission",children:"1. Real-time Data Transmission"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Secure MQTT connection for real-time data streaming"}),"\n",(0,r.jsx)(n.li,{children:"Automatic reconnection handling"}),"\n",(0,r.jsx)(n.li,{children:"Data buffering for offline operation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-device-management",children:"2. Device Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatic device registration"}),"\n",(0,r.jsx)(n.li,{children:"OTA (Over-The-Air) updates"}),"\n",(0,r.jsx)(n.li,{children:"Configuration management"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-security",children:"3. Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TLS/SSL encryption"}),"\n",(0,r.jsx)(n.li,{children:"Secure credential storage"}),"\n",(0,r.jsx)(n.li,{children:"Authentication and authorization"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsx)(n.h3,{id:"custom-data-types",children:"Custom Data Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// Define custom data structure\nstruct SensorData {\n  float temperature;\n  float humidity;\n  int pressure;\n};\n\n// Send custom data\nSensorData data = {25.5, 60.0, 1013};\nmedibound.sendCustomData("sensor_readings", data);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"event-handling",children:"Event Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"void onConnectionLost() {\n  // Handle connection loss\n}\n\nvoid onCommandReceived(String command) {\n  // Process incoming commands\n}\n\n// Register callbacks\nmedibound.onConnectionLost(onConnectionLost);\nmedibound.onCommandReceived(onCommandReceived);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Always implement proper error checking"}),"\n",(0,r.jsx)(n.li,{children:"Use try-catch blocks for critical operations"}),"\n",(0,r.jsx)(n.li,{children:"Implement fallback mechanisms"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Power Management"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use deep sleep when possible"}),"\n",(0,r.jsx)(n.li,{children:"Implement power-saving features"}),"\n",(0,r.jsx)(n.li,{children:"Monitor battery levels"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Management"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement data validation"}),"\n",(0,r.jsx)(n.li,{children:"Use appropriate sampling rates"}),"\n",(0,r.jsx)(n.li,{children:"Buffer data when offline"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.p,{children:"Common issues and solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Connection Issues"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check WiFi credentials"}),"\n",(0,r.jsx)(n.li,{children:"Verify API credentials"}),"\n",(0,r.jsx)(n.li,{children:"Ensure proper network configuration"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Transmission Problems"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check payload size"}),"\n",(0,r.jsx)(n.li,{children:"Verify data format"}),"\n",(0,r.jsx)(n.li,{children:"Monitor memory usage"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Performance Issues"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Optimize sampling rates"}),"\n",(0,r.jsx)(n.li,{children:"Reduce payload size"}),"\n",(0,r.jsx)(n.li,{children:"Implement proper buffering"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,r.jsx)(n.p,{children:"For additional support:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Visit our ",(0,r.jsx)(n.a,{href:"https://github.com/medibound/esp32-library",children:"GitHub repository"})]}),"\n",(0,r.jsxs)(n.li,{children:["Join our ",(0,r.jsx)(n.a,{href:"https://discord.gg/medibound",children:"Discord community"})]}),"\n",(0,r.jsxs)(n.li,{children:["Contact our support team at ",(0,r.jsx)(n.a,{href:"mailto:support@medibound.com",children:"support@medibound.com"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);